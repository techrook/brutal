package services

import (
	"brutal/internal/db"
	"brutal/internal/models"
	"time"
)

type MessageService struct{}

func NewMessageService() *MessageService {
	return &MessageService{}
}

func (s *MessageService) CreateMessage(profileID, content, ip, userAgent string) (*models.Message, error) {
	msg := &models.Message{
		ID:        "", // will be generated by DB
		ProfileID: profileID,
		Content:   content,
		IPAddress: ip,
		UserAgent: userAgent,
		IsHidden:  false,
		CreatedAt: time.Now(),
	}

	query := `
		INSERT INTO messages (profile_id, content, ip_address, user_agent, is_hidden, created_at)
		VALUES ($1, $2, $3, $4, $5, $6)
		RETURNING id
	`

	err := db.DB.QueryRow(
		query,
		msg.ProfileID,
		msg.Content,
		msg.IPAddress,
		msg.UserAgent,
		msg.IsHidden,
		msg.CreatedAt,
	).Scan(&msg.ID)

	if err != nil {
		return nil, err
	}

	return msg, nil
}

func (s *MessageService) GetMessagesByProfile(profileID string) ([]*models.Message, error) {
	var messages []*models.Message
	query := "SELECT * FROM messages WHERE profile_id = $1 AND is_hidden = false ORDER BY created_at DESC"
	err := db.DB.Select(&messages, query, profileID)
	return messages, err
}